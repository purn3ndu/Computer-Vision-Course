{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red13\green0\blue129;\red235\green236\blue237;\red36\green38\blue41;
\red104\green26\blue29;\red43\green39\blue19;\red114\green121\blue129;\red37\green127\blue159;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl300\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 [\cf6 \strokec6 out\cf5 \strokec5 ]\cf4 \strokec4  = \cf6 \strokec6 bilinearInterpolation\cf5 \strokec5 (\cf6 \strokec6 im\cf4 \strokec4 , \cf6 \strokec6 out_dims\cf5 \strokec5 )\cf4 \strokec4 \
\
    \cf7 \strokec7 %// Get some necessary variables first\cf4 \strokec4 \
    \cf6 \strokec6 in_rows\cf4 \strokec4  = \cf6 \strokec6 size\cf5 \strokec5 (\cf6 \strokec6 im\cf4 \strokec4 ,\cf5 \strokec5 1)\cf4 \strokec4 ;\
    \cf6 \strokec6 in_cols\cf4 \strokec4  = \cf6 \strokec6 size\cf5 \strokec5 (\cf6 \strokec6 im\cf4 \strokec4 ,\cf5 \strokec5 2)\cf4 \strokec4 ;\
    \cf6 \strokec6 out_rows\cf4 \strokec4  = \cf6 \strokec6 out_dims\cf5 \strokec5 (1)\cf4 \strokec4 ;\
    \cf6 \strokec6 out_cols\cf4 \strokec4  = \cf6 \strokec6 out_dims\cf5 \strokec5 (2)\cf4 \strokec4 ;\
\
    \cf7 \strokec7 %// Let S_R = R / R'        \cf4 \strokec4 \
    \cf6 \strokec6 S_R\cf4 \strokec4  = \cf6 \strokec6 in_rows\cf4 \strokec4  / \cf6 \strokec6 out_rows\cf4 \strokec4 ;\
    \cf7 \strokec7 %// Let S_C = C / C'\cf4 \strokec4 \
    \cf6 \strokec6 S_C\cf4 \strokec4  = \cf6 \strokec6 in_cols\cf4 \strokec4  / \cf6 \strokec6 out_cols\cf4 \strokec4 ;\
\
    \cf7 \strokec7 %// Define grid of co-ordinates in our image\cf4 \strokec4 \
    \cf7 \strokec7 %// Generate (x,y) pairs for each point in our image\cf4 \strokec4 \
    \cf5 \strokec5 [\cf6 \strokec6 cf\cf4 \strokec4 , \cf6 \strokec6 rf\cf5 \strokec5 ]\cf4 \strokec4  = \cf6 \strokec6 meshgrid\cf5 \strokec5 (1\cf4 \strokec4  : \cf6 \strokec6 out_cols\cf4 \strokec4 , \cf5 \strokec5 1\cf4 \strokec4  : \cf6 \strokec6 out_rows\cf5 \strokec5 )\cf4 \strokec4 ;\
\
    \cf7 \strokec7 %// Let r_f = r'*S_R for r = 1,...,R'\cf4 \strokec4 \
    \cf7 \strokec7 %// Let c_f = c'*S_C for c = 1,...,C'\cf4 \strokec4 \
    \cf6 \strokec6 rf\cf4 \strokec4  = \cf6 \strokec6 rf\cf4 \strokec4  * \cf6 \strokec6 S_R\cf4 \strokec4 ;\
    \cf6 \strokec6 cf\cf4 \strokec4  = \cf6 \strokec6 cf\cf4 \strokec4  * \cf6 \strokec6 S_C\cf4 \strokec4 ;\
\
    \cf7 \strokec7 %// Let r = floor(rf) and c = floor(cf)\cf4 \strokec4 \
    \cf6 \strokec6 r\cf4 \strokec4  = \cf6 \strokec6 floor\cf5 \strokec5 (\cf6 \strokec6 rf\cf5 \strokec5 )\cf4 \strokec4 ;\
    \cf6 \strokec6 c\cf4 \strokec4  = \cf6 \strokec6 floor\cf5 \strokec5 (\cf6 \strokec6 cf\cf5 \strokec5 )\cf4 \strokec4 ;\
\
    \cf7 \strokec7 %// Any values out of range, cap\cf4 \strokec4 \
    \cf6 \strokec6 r\cf5 \strokec5 (\cf6 \strokec6 r\cf4 \strokec4  < \cf5 \strokec5 1)\cf4 \strokec4  = \cf5 \strokec5 1\cf4 \strokec4 ;\
    \cf6 \strokec6 c\cf5 \strokec5 (\cf6 \strokec6 c\cf4 \strokec4  < \cf5 \strokec5 1)\cf4 \strokec4  = \cf5 \strokec5 1\cf4 \strokec4 ;\
    \cf6 \strokec6 r\cf5 \strokec5 (\cf6 \strokec6 r\cf4 \strokec4  > \cf6 \strokec6 in_rows\cf4 \strokec4  - \cf5 \strokec5 1)\cf4 \strokec4  = \cf6 \strokec6 in_rows\cf4 \strokec4  - \cf5 \strokec5 1\cf4 \strokec4 ;\
    \cf6 \strokec6 c\cf5 \strokec5 (\cf6 \strokec6 c\cf4 \strokec4  > \cf6 \strokec6 in_cols\cf4 \strokec4  - \cf5 \strokec5 1)\cf4 \strokec4  = \cf6 \strokec6 in_cols\cf4 \strokec4  - \cf5 \strokec5 1\cf4 \strokec4 ;\
\
    \cf7 \strokec7 %// Let delta_R = rf - r and delta_C = cf - c\cf4 \strokec4 \
    \cf6 \strokec6 delta_R\cf4 \strokec4  = \cf6 \strokec6 rf\cf4 \strokec4  - \cf6 \strokec6 r\cf4 \strokec4 ;\
    \cf6 \strokec6 delta_C\cf4 \strokec4  = \cf6 \strokec6 cf\cf4 \strokec4  - \cf6 \strokec6 c\cf4 \strokec4 ;\
\
    \cf7 \strokec7 %// Final line of algorithm\cf4 \strokec4 \
    \cf7 \strokec7 %// Get column major indices for each point we wish\cf4 \strokec4 \
    \cf7 \strokec7 %// to access\cf4 \strokec4 \
    \cf6 \strokec6 in1_ind\cf4 \strokec4  = \cf6 \strokec6 sub2ind\cf5 \strokec5 ([\cf6 \strokec6 in_rows\cf4 \strokec4 , \cf6 \strokec6 in_cols\cf5 \strokec5 ]\cf4 \strokec4 , \cf6 \strokec6 r\cf4 \strokec4 , \cf6 \strokec6 c\cf5 \strokec5 )\cf4 \strokec4 ;\
    \cf6 \strokec6 in2_ind\cf4 \strokec4  = \cf6 \strokec6 sub2ind\cf5 \strokec5 ([\cf6 \strokec6 in_rows\cf4 \strokec4 , \cf6 \strokec6 in_cols\cf5 \strokec5 ]\cf4 \strokec4 , \cf6 \strokec6 r\cf5 \strokec5 +1\cf4 \strokec4 ,\cf6 \strokec6 c\cf5 \strokec5 )\cf4 \strokec4 ;\
    \cf6 \strokec6 in3_ind\cf4 \strokec4  = \cf6 \strokec6 sub2ind\cf5 \strokec5 ([\cf6 \strokec6 in_rows\cf4 \strokec4 , \cf6 \strokec6 in_cols\cf5 \strokec5 ]\cf4 \strokec4 , \cf6 \strokec6 r\cf4 \strokec4 , \cf6 \strokec6 c\cf5 \strokec5 +1)\cf4 \strokec4 ;\
    \cf6 \strokec6 in4_ind\cf4 \strokec4  = \cf6 \strokec6 sub2ind\cf5 \strokec5 ([\cf6 \strokec6 in_rows\cf4 \strokec4 , \cf6 \strokec6 in_cols\cf5 \strokec5 ]\cf4 \strokec4 , \cf6 \strokec6 r\cf5 \strokec5 +1\cf4 \strokec4 , \cf6 \strokec6 c\cf5 \strokec5 +1)\cf4 \strokec4 ;       \
\
    \cf7 \strokec7 %// Now interpolate\cf4 \strokec4 \
    \cf7 \strokec7 %// Go through each channel for the case of colour\cf4 \strokec4 \
    \cf7 \strokec7 %// Create output image that is the same class as input\cf4 \strokec4 \
    \cf6 \strokec6 out\cf4 \strokec4  = \cf6 \strokec6 zeros\cf5 \strokec5 (\cf6 \strokec6 out_rows\cf4 \strokec4 , \cf6 \strokec6 out_cols\cf4 \strokec4 , \cf6 \strokec6 size\cf5 \strokec5 (\cf6 \strokec6 im\cf4 \strokec4 , \cf5 \strokec5 3))\cf4 \strokec4 ;\
    \cf6 \strokec6 out\cf4 \strokec4  = \cf6 \strokec6 cast\cf5 \strokec5 (\cf6 \strokec6 out\cf4 \strokec4 , \cf6 \strokec6 class\cf5 \strokec5 (\cf6 \strokec6 im\cf5 \strokec5 ))\cf4 \strokec4 ;\
\
    \cf2 \strokec2 for\cf4 \strokec4  \cf6 \strokec6 idx\cf4 \strokec4  = \cf5 \strokec5 1\cf4 \strokec4  : \cf6 \strokec6 size\cf5 \strokec5 (\cf6 \strokec6 im\cf4 \strokec4 , \cf5 \strokec5 3)\cf4 \strokec4 \
        \cf6 \strokec6 chan\cf4 \strokec4  = \cf8 \strokec8 double\cf5 \strokec5 (\cf6 \strokec6 im\cf5 \strokec5 (\cf4 \strokec4 :,:,\cf6 \strokec6 idx\cf5 \strokec5 ))\cf4 \strokec4 ; \cf7 \strokec7 %// Get i'th channel\cf4 \strokec4 \
        \cf7 \strokec7 %// Interpolate the channel\cf4 \strokec4 \
        \cf6 \strokec6 tmp\cf4 \strokec4  = \cf6 \strokec6 chan\cf5 \strokec5 (\cf6 \strokec6 in1_ind\cf5 \strokec5 )\cf4 \strokec4 .*\cf5 \strokec5 (1\cf4 \strokec4  - \cf6 \strokec6 delta_R\cf5 \strokec5 )\cf4 \strokec4 .*\cf5 \strokec5 (1\cf4 \strokec4  - \cf6 \strokec6 delta_C\cf5 \strokec5 )\cf4 \strokec4  + \cf6 \strokec6 ...\
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \strokec4                        \cf6 \strokec6 chan\cf5 \strokec5 (\cf6 \strokec6 in2_ind\cf5 \strokec5 )\cf4 \strokec4 .*\cf5 \strokec5 (\cf6 \strokec6 delta_R\cf5 \strokec5 )\cf4 \strokec4 .*\cf5 \strokec5 (1\cf4 \strokec4  - \cf6 \strokec6 delta_C\cf5 \strokec5 )\cf4 \strokec4  + \cf6 \strokec6 ...\
\cf4 \strokec4                        \cf6 \strokec6 chan\cf5 \strokec5 (\cf6 \strokec6 in3_ind\cf5 \strokec5 )\cf4 \strokec4 .*\cf5 \strokec5 (1\cf4 \strokec4  - \cf6 \strokec6 delta_R\cf5 \strokec5 )\cf4 \strokec4 .*\cf5 \strokec5 (\cf6 \strokec6 delta_C\cf5 \strokec5 )\cf4 \strokec4  + \cf6 \strokec6 ...\
\cf4 \strokec4                        \cf6 \strokec6 chan\cf5 \strokec5 (\cf6 \strokec6 in4_ind\cf5 \strokec5 )\cf4 \strokec4 .*\cf5 \strokec5 (\cf6 \strokec6 delta_R\cf5 \strokec5 )\cf4 \strokec4 .*\cf5 \strokec5 (\cf6 \strokec6 delta_C\cf5 \strokec5 )\cf4 \strokec4 ;\
        \cf6 \strokec6 out\cf5 \strokec5 (\cf4 \strokec4 :,:,\cf6 \strokec6 idx\cf5 \strokec5 )\cf4 \strokec4  = \cf6 \strokec6 cast\cf5 \strokec5 (\cf6 \strokec6 tmp\cf4 \strokec4 , \cf6 \strokec6 class\cf5 \strokec5 (\cf6 \strokec6 im\cf5 \strokec5 ))\cf4 \strokec4 ;\
    \cf2 \strokec2 end\cf6 \strokec6 \
}